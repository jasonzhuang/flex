package{    import com.greensock.TweenLite;    import com.greensock.easing.Quad;    import flash.display.MovieClip;    import flash.display.Shape;    import flash.display.Sprite;    import flash.events.Event;    import flash.events.MouseEvent;    import flash.geom.Point;    import flash.text.TextField;    public class MouseScrollList extends Sprite    {        private var background:Sprite;        private var menuMask:Shape;        private var listHitArea:Shape;        private var list:Sprite;        private var prevY:Number = 0;        private var listHeight:Number;        private var hitAreaHeight:Number;        private var listY:Number;        private var listX:Number;        private var listInitY:Number;        private var verticalPadding:Number = 5;        private var itemHeight:Number = 35;        private var children:Number = 50;        private var componentWidth:Number;        private var componentHeight:Number;        private var scrollOnMouseMove:Boolean = false;  // uses mouse move instead of enter frame, but doesn't work as good as I thought        private var scroll:Boolean = true; // on mouse down set to false to hold scroll position in list when item is clicked        public function MouseScrollList(w:Number, h:Number, scrollOnMouseMove:Boolean = false)        {            this.componentWidth = w;            this.componentHeight = h;            this.scrollOnMouseMove = scrollOnMouseMove;            addEventListener(Event.ADDED_TO_STAGE, init);            addEventListener(Event.REMOVED, destroy);        }        private function init(e:Event):void        {            removeEventListener(Event.ADDED_TO_STAGE, init);            if(scrollOnMouseMove){                addEventListener(MouseEvent.MOUSE_MOVE, handleMouseMove);            } else {                addEventListener(Event.ENTER_FRAME, handleEnterFrame);            }            menuMask = new Shape();            menuMask.graphics.clear();            menuMask.graphics.beginFill(0xFFFFFF, .4);            menuMask.graphics.drawRect(0, 0, componentWidth, componentHeight)            menuMask.graphics.endFill();            this.addChild(menuMask);            list = new Sprite();            list.mask = menuMask;            this.addChild(list);			//make itemRenderer            for(var i:int = 0; i < children; i++) {                var textField:TextField = new TextField();                textField.text = String(i);                textField.mouseEnabled = false;                var item:Sprite = new Sprite();                    item.graphics.clear();                    item.graphics.beginFill(0xFF0000, 1);                    item.graphics.drawRect(0, 0, componentWidth - verticalPadding*2, itemHeight)                    item.graphics.endFill()                    item.y = i*(verticalPadding + itemHeight);                    item.x = verticalPadding;                    item.addEventListener(MouseEvent.ROLL_OVER, handleRollOver);                    item.addEventListener(MouseEvent.ROLL_OUT, handleRollOut);                    item.addEventListener(MouseEvent.MOUSE_DOWN, handleMouseDown);                    item.addEventListener(MouseEvent.MOUSE_UP, handleMouseUp);                    item.addChild(textField)                list.addChild(item);            }            listHitArea = new Shape();            listHitArea.graphics.clear();            listHitArea.graphics.beginFill(0xFFFFFF, 0);            listHitArea.graphics.drawRect(0, 0, componentWidth, componentHeight)            listHitArea.graphics.endFill();            this.addChild(listHitArea);            var point:Point = new Point(listHitArea.x, listHitArea.y);                point = this.globalToLocal(point);            listX = point.x;            listY = point.y;            listInitY = list.y;            hitAreaHeight = listHitArea.height;            listHeight = children*(verticalPadding + itemHeight) - hitAreaHeight;        }        private function scrollMouseMove(y:Number):void        {            var percent:Number = y/hitAreaHeight;            var newY:Number = -(Math.round(listHeight*percent));            if(newY + itemHeight*3 > hitAreaHeight) {                newY = hitAreaHeight;            } else if (newY + itemHeight*3 > listInitY) {                newY = listInitY;            }            TweenLite.to(list, 2, {y:newY, ease:Quad.easeOut});        }        private function scrollEnterFrame(y:Number):void        {            var distance:Number = Math.cos( ( -(y + listY)/hitAreaHeight)*Math.PI )*15;            var currentY:Number = list.y;            var newY:Number;            if( (currentY + distance - verticalPadding) > listInitY + verticalPadding) return;            newY = list.y + distance;            var delta:Number = Math.abs(prevY - newY);            if(delta < 1) {                list.y = prevY;                return;            }            if(newY >= listInitY) {                newY = listInitY;            } else if (Math.abs(newY) > listHeight){                newY = -listHeight;            }            prevY = list.y;            list.y = newY;        }        private function handleMouseMove(event:MouseEvent):void        {            var x:Number = this.mouseX + Math.abs(listX);            var y:Number = this.mouseY + Math.abs(listY);            if( menuMask.hitTestPoint( x, y )  && scroll) {                scrollMouseMove(y - Math.abs(listY));            }        }        private function handleEnterFrame(event:Event):void        {            var x:Number = this.mouseX + Math.abs(listX);            var y:Number = this.mouseY + Math.abs(listY);            if( listHitArea.hitTestPoint( x, y ) && scroll  ) {                scrollEnterFrame(y);            }        }        public function handleRollOver(e:MouseEvent):void        {            e.target.alpha = .5;        }        private function handleRollOut(e:MouseEvent):void        {            e.target.alpha = 1;        }        private function handleMouseDown(e:MouseEvent):void        {            e.target.alpha = .2;            scroll = false;        }        private function handleMouseUp(e:MouseEvent):void        {            e.target.alpha = 1;            scroll = true;        }        private function destroy(e:Event):void        {            removeEventListener(Event.REMOVED, destroy);            var list:MovieClip = list as MovieClip;            if(list.numChildren != 0) {                var i:int = list.numChildren;                while( i-- ){                    var item:Sprite = list.getChildAt(i) as Sprite;                    item.removeEventListener(MouseEvent.MOUSE_DOWN, handleMouseDown);                    item.removeEventListener(MouseEvent.MOUSE_UP, handleMouseDown);                    item.removeEventListener(MouseEvent.ROLL_OVER, handleRollOver);                    item.removeEventListener(MouseEvent.ROLL_OUT, handleRollOut);                    list.removeChildAt( i );                }            }            removeEventListener(Event.ADDED_TO_STAGE, init);            removeEventListener(Event.REMOVED, destroy);            removeEventListener(Event.ENTER_FRAME, handleEnterFrame);            removeEventListener(MouseEvent.MOUSE_MOVE, handleMouseMove);        }    }}