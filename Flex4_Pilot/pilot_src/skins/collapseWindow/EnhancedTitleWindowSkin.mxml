<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.
    
    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark TitleWindow container.  

     @see spark.skins.spark.TitleWindowCloseButtonSkin
     @see spark.components.TitleWindow

     @langversion 3.0
     @playerversion Flash 10
     @playerversion AIR 1.5
     @productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
    xmlns:fb="http://ns.adobe.com/flashbuilder/2009" blendMode="normal" mouseEnabled="false"
    minWidth="76" minHeight="0" alpha.disabled="0.5" alpha.disabledWithControlBar="0.5" 
	xmlns:enhancedtitlewindow="components.collapseWindow.*">
    <fx:Metadata>
		[HostComponent("components.collapseWindow.EnhancedTitleWindow")]
	</fx:Metadata>
    
    <fx:Script fb:purpose="styling">
        /* Define the skin elements that should not be colorized. 
        For panel, border and title background are skinned, but the content area and title text are not. */
        static private const exclusions:Array = ["background", "titleDisplay", "contentGroup"];
        
        /**
         * @private
         */  
        override public function get colorizeExclusions():Array {return exclusions;}
        
        /**
         * @private
         */
        override protected function initializationComplete():void
        {
            useChromeColor = true;
            super.initializationComplete();
        }
        
        /**
         * @private
         */
        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
        {
            if (getStyle("borderVisible") == true)
            {
                border.visible = true;
                background.left = background.top = background.right = background.bottom = 1;
                contents.left = contents.top = contents.right = contents.bottom = 1;
            }
            else
            {
                border.visible = false;
                background.left = background.top = background.right = background.bottom = 0;
                contents.left = contents.top = contents.right = contents.bottom = 0;
            }
            
/*             dropShadow.visible = getStyle("dropShadowVisible"); */
            
            var cr:Number = getStyle("cornerRadius");
            var withControls:Boolean = 
                (currentState == "disabledWithControlBar" || 
                 currentState == "normalWithControlBar" ||
                 currentState == "inactiveWithControlBar");
            
            if (cornerRadius != cr)
            {
                cornerRadius = cr;
                
/*                 dropShadow.tlRadius = cornerRadius;
                dropShadow.trRadius = cornerRadius;
                dropShadow.blRadius = withControls ? cornerRadius : 0;
                dropShadow.brRadius = withControls ? cornerRadius : 0; */
                
                setPartCornerRadii(topMaskRect, withControls); 
                setPartCornerRadii(border, withControls); 
                setPartCornerRadii(background, withControls);
            }
            
            if (bottomMaskRect) setPartCornerRadii(bottomMaskRect, withControls); 
            
            borderStroke.color = getStyle("borderColor");
            borderStroke.alpha = getStyle("borderAlpha");
            backgroundFill.color = getStyle("backgroundColor");
            backgroundFill.alpha = getStyle("backgroundAlpha");
			
			expandIndicator.visible = expandIndicator.includeInLayout = getStyle("showExpandIndicator");
			var barHeight:Number = getStyle("titleBarHeight");
			titleBarGroup.height = isNaN(barHeight) ? 20 : barHeight;
            
            super.updateDisplayList(unscaledWidth, unscaledHeight);
        }
        
        /**
         * @private
         */  
        private function setPartCornerRadii(target:Rect, includeBottom:Boolean):void
        {            
            target.topLeftRadiusX = cornerRadius;
            target.topRightRadiusX = cornerRadius;
            target.bottomLeftRadiusX = includeBottom ? cornerRadius : 0;
            target.bottomRightRadiusX = includeBottom ? cornerRadius : 0;
        }
        
        private var cornerRadius:Number;
    </fx:Script>
    
    <s:states>
        <s:State name="normal" />
        <s:State name="inactive" stateGroups="inactiveGroup" />
        <s:State name="disabled" />
        <s:State name="normalWithControlBar" stateGroups="withControls" />
        <s:State name="inactiveWithControlBar" stateGroups="withControls, inactiveGroup" />
        <s:State name="disabledWithControlBar" stateGroups="withControls" />
		<s:State name="collapsed" stateGroups="collapsedStates"/>
		<s:State name="disabledCollapsed" stateGroups="collapsedStates,disabledStates"/>
   </s:states>
    
	<s:transitions>
		<s:Transition fromState="normal">
			<s:Resize target="{contentGroup}" duration="400"/>
		</s:Transition>
		<s:Transition fromState="normalWithControlBar">
			<s:Resize target="{contentGroup}" duration="400"/>
		</s:Transition>
		<s:Transition fromState="collapsed">
			<s:Resize target="{contentGroup}" duration="400"/>
		</s:Transition>
		<s:Transition fromState="disabled">
			<s:Resize target="{contentGroup}" duration="400"/>
		</s:Transition>
		<s:Transition fromState="disabledWithControlBar">
			<s:Resize target="{contentGroup}" duration="400"/>
		</s:Transition>
	</s:transitions>
	
    <!--- drop shadow can't be hittable so it stays sibling of other graphics @private-->
<!--    <s:RectangularDropShadow id="dropShadow" blurX="20" blurY="20" alpha="0.32" 
                             alpha.inactiveGroup="0.22" distance="11"  distance.inactiveGroup="7"
                             angle="90" color="0x000000" left="0" top="0" right="0" bottom="0"/>-->
    
    <!--- drop shadow can't be hittable so all other graphics go in this group -->
    <s:Group left="0" right="0" top="0" bottom="0">
        
        <!--- top group mask @private-->
        <s:Group left="1" top="1" right="1" bottom="1" id="topGroupMask">
            <s:Rect id="topMaskRect" left="0" top="0" right="0" bottom="0">
                <s:fill>
                    <s:SolidColor alpha="0"/>
                </s:fill>
            </s:Rect>
        </s:Group>
        
        <!--- bottom group mask @private-->
        <s:Group left="1" top="1" right="1" bottom="1" id="bottomGroupMask" 
                 includeIn="withControls">
            <s:Rect id="bottomMaskRect" left="0" top="0" right="0" bottom="0">
                <s:fill>
                    <s:SolidColor alpha="0"/>
                </s:fill>
            </s:Rect>
        </s:Group>
        
        <!--- layer 1: border @private -->
        <s:Rect id="border" left="0" right="0" top="0" bottom="0" bottom.collapsedStates="1">
            <s:stroke>
                <!--- Defines the TitleWindowSkin class's border stroke. The default value is 1. -->
                <s:SolidColorStroke id="borderStroke" weight="1" />
            </s:stroke>
        </s:Rect>
        
        <!-- layer 2: background fill -->
        <!--- Defines the appearance of the TitleWindowSkin class's background. -->
        <s:Rect id="background" left="1" top="1" right="1" bottom="1">
            <s:fill>
                <s:SolidColor id="backgroundFill" color="#FF0000"/>
            </s:fill>
        </s:Rect>
        
        <!-- layer 3: contents left="1" right="1" top="1" bottom="1"-->
        <!--- Contains the vertical stack of title bar content and control bar. -->
        <s:Group left="1" right="1" top="1" bottom="1" id="contents">
            <s:layout>
                <s:VerticalLayout gap="0" horizontalAlign="justify" />
            </s:layout>
			
            <!--- @private -->
            <s:Group id="topGroup" mask="{topGroupMask}">
                
                <!--- layer 0: title bar fill @private -->
                <s:Rect id="tbFill" left="0" right="0" top="0" bottom="1">
                    <s:fill>
                        <s:LinearGradient rotation="90">
                            <s:GradientEntry color="0xD2D2D2"
                                             color.inactiveGroup="0xEAEAEA"/>
                            <s:GradientEntry color="0x9A9A9A"
                                             color.inactiveGroup="0xCECECE"/>
                        </s:LinearGradient>
                    </s:fill>
                </s:Rect>
                
                <!--- layer 1: title bar highlight @private -->
                <s:Rect id="tbHilite" left="0" right="0" top="0" bottom="0">
                    <s:stroke>
                        <s:LinearGradientStroke rotation="90" weight="1">
                            <s:GradientEntry color="0xE6E6E6" />
                            <s:GradientEntry color="0xFFFFFF" alpha="0.22"/>
                        </s:LinearGradientStroke>
                    </s:stroke>
                    <s:fill>
                        <s:LinearGradient rotation="90">
                            <s:GradientEntry color="0xFFFFFF" alpha="0.15" />
                            <s:GradientEntry color="0xFFFFFF" alpha="0.15" ratio="0.44"/>
                            <s:GradientEntry color="0xFFFFFF" alpha="0" ratio="0.4401"/>
                        </s:LinearGradient>
                    </s:fill>
                </s:Rect>
                
                <!--- layer 2: title bar divider @private -->
                <s:Rect id="tbDiv" left="0" right="0" height="1" bottom="0">
                    <s:fill>
                        <s:SolidColor color="0x000000" alpha="0.75" />
                    </s:fill>
                </s:Rect>
                
				<!-- layer 4: moveArea -->
				<!--- @copy spark.components.TitleWindow#moveArea -->
				<s:Group id="moveArea" left="0" right="0" top="0" bottom="0" />
				
                <!-- layer 3: text-->
                <!--- @copy spark.components.Panel#titleDisplay -->
				<s:Group id="titleBarGroup" left="6" right="1" top="1">
					<s:layout><s:HorizontalLayout verticalAlign="middle" gap="4"/></s:layout>
					<enhancedtitlewindow:TriangleIndicator id="expandIndicator"/>
					<s:Label id="titleDisplay" maxDisplayedLines="1"
							 height="100%"
							 verticalAlign="middle" fontWeight="bold">
					</s:Label>
					<s:Group id="titleBarContentGroup" width="100%" height="100%">
						<s:layout><s:HorizontalLayout/></s:layout>
					</s:Group>

					<!--- @copy spark.components.TitleWindow#closeButton -->
	                <s:Button id="closeButton" skinClass="spark.skins.spark.TitleWindowCloseButtonSkin"
	                          width="15" height="15" visible="{hostComponent.showCloseButton}" includeInLayout="{hostComponent.showCloseButton}"/>
				</s:Group>
                
            </s:Group><!--end topGrop-->
            
            <!--
                Note: setting the minimum size to 0 here so that changes to the host component's
                size will not be thwarted by this skin part's minimum size.   This is a compromise,
                more about it here: http://bugs.adobe.com/jira/browse/SDK-21143
            -->
            <!--- @copy spark.components.SkinnableContainer#contentGroup -->
            <s:Group id="contentGroup" width="100%" height="100%" height.collapsedStates="0" minWidth="0" minHeight="0" clipAndEnableScrolling="true">
            </s:Group>
			
        </s:Group><!--end contents-->
	</s:Group>
</s:SparkSkin>
