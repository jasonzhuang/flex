<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
// ADOBE SYSTEMS INCORPORATED
// Copyright 2007 Adobe Systems Incorporated
// All Rights Reserved.
//
// NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance with the 
// terms of the Adobe license agreement accompanying it.  If you have received this file from a 
// source other than Adobe, then your use, modification, or distribution of it requires the prior 
// written permission of Adobe.
////////////////////////////////////////////////////////////////////////////////
-->
<s:Application  xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:mx="library://ns.adobe.com/flex/mx"
                xmlns:custom="components.layout.*"
                applicationComplete="requestPhotos()"
				>

    <fx:Script>
        <![CDATA[
            import mx.collections.ArrayCollection;
            import mx.events.EffectEvent;
            import mx.rpc.events.ResultEvent;
            
            import spark.components.Group;
            import spark.components.supportClasses.GroupBase;
            import spark.effects.Animate;
            import spark.effects.Move3D;
            import spark.effects.Rotate3D;
            import spark.effects.animation.MotionPath;

            [Bindable]
            private var photoFeed:ArrayCollection;
            
            private function requestPhotos():void {
                var params:Object = new Object();
                params.format = 'rss_200_enc';
                params.tags = searchTerms.text;
                photoService.send(params);
            }

            private function photoHandler(event:ResultEvent):void {
                photoFeed = event.result.rss.channel.item as ArrayCollection;
            }
            
            private function animateTo(toState:String):void
            {
                // Make sure any previous animation is stopped.
                if (myEffect.isPlaying)
                    myEffect.stop();
                
                // Add targets
                myEffect.targets = new Array();
                for (var i:int = 0; i < theList.dataGroup.numElements; i++)
                    myEffect.targets.push(theList.dataGroup.getElementAt(i));
                
                // Create Transition for all elements
                myEffect.captureStartValues();

                // Go to the end state
                var fromState:String = this.currentState;
                setCurrentState(toState);
                
                // Validate everything before turning off the layout
                theList.validateNow();

                // Turn the layout off before running the effect
                theList.dataGroup.autoLayout = false;
                
                // Play the effect
                myEffect.play();
            }

            protected function myEffect_effectEndHandler(event:EffectEvent):void
            {
                theList.dataGroup.autoLayout = true;
            }

         ]]>
    </fx:Script>

    <fx:Declarations>
        <s:HTTPService id="photoService"
            url="http://api.flickr.com/services/feeds/photos_public.gne"
            result="photoHandler(event)" />
        
        <s:Parallel id="myEffect" effectEnd="myEffect_effectEndHandler(event)">
            <s:Move3D applyChangesPostLayout="false"/>
            <s:Rotate3D applyChangesPostLayout="false"/>
        </s:Parallel>
    </fx:Declarations>
    
    <s:states>
        <s:State name="tile"/>
        <s:State name="wheel"/>
        <s:State name="vertical"/>
        <s:State name="horizontal"/>
    </s:states>
    
    <s:layout>
        <s:VerticalLayout paddingTop="10" paddingLeft="10" paddingRight="10" paddingBottom="10"/>
    </s:layout>
	
	<s:HGroup>
		<s:Label text="Flickr tags or search terms:" />
		<s:TextInput id="searchTerms"
			enter="requestPhotos()" text="chameleons" />
		<s:Button label="Search" 
			click="requestPhotos()" />
        <s:DropDownList id="dl" requireSelection="true" change="{animateTo(dl.selectedItem)}">
            <s:dataProvider>
                <s:ArrayList source="{'tile wheel vertical horizontal'.split(' ')}"/>
            </s:dataProvider>
        </s:DropDownList>
	</s:HGroup>

	<s:List width="100%" height="100%"
		dataProvider="{photoFeed}"
		itemRenderer="components.itemRenderer.FlickrThumbnail"
        id="theList" useVirtualLayout="false">
		
        <s:layout.vertical>
            <s:VerticalLayout horizontalAlign="center"/>
        </s:layout.vertical>
        <s:layout.horizontal>
            <s:HorizontalLayout verticalAlign="middle"/>
        </s:layout.horizontal>
        <s:layout.tile>
            <s:TileLayout horizontalAlign="center" verticalAlign="bottom" columnWidth="112" rowHeight="132"
                          requestedColumnCount="5"/>
        </s:layout.tile>
		<s:layout.wheel>
		    <custom:WheelLayout gap="20" axisAngle="{axisSlider.value}"
                                     verticalCenterOffset="{offsetSlider.value}"/>
		</s:layout.wheel>
	</s:List>

    <!-- The slider to control the axis angle -->
    <s:HGroup>
        <s:HSlider id="axisSlider" minimum="-90" maximum="90"
                   value="14" liveDragging="true" width="300"/>
        <s:HSlider id="offsetSlider" minimum="-300" maximum="300"
                   value="-101" liveDragging="true" width="300"/>
    </s:HGroup>

</s:Application>
